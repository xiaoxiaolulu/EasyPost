# Generated by Django 3.0.6 on 2023-07-28 16:34

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, verbose_name='VerifyCode Code')),
                ('account', models.CharField(max_length=125, verbose_name='VerifyCode Account')),
                ('account_type', models.CharField(choices=[('email', '邮箱'), ('mobile', '手机')], default='email', max_length=6, verbose_name='VerifyCode AccountType')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='VerifyCode AddTime')),
            ],
            options={
                'verbose_name': 'Verify Code',
                'verbose_name_plural': 'Verify Code',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=20, null=True, verbose_name='User Nickname')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='User Mobile')),
                ('email', models.CharField(blank=True, max_length=125, null=True, verbose_name='User Email')),
                ('introduction', models.TextField(blank=True, default="The user is lazy and didn't write anything...", null=True, verbose_name='User Introduction')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatars/', verbose_name='User Avatar')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='User Address')),
                ('birthday', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='User Birthday')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='male', max_length=6, verbose_name='User Gender')),
                ('dept', models.CharField(blank=True, default='Quality Testing Department', max_length=125, null=True, verbose_name='User Dept')),
                ('is_valid', models.CharField(choices=[(0, 0), (1, 1)], default=1, max_length=10, verbose_name='User IsValid')),
                ('role', models.CharField(blank=True, max_length=20, null=True, verbose_name='User Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
